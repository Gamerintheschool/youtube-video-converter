name: Deploy YouTube Converter

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test application startup
      env:
        RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY || 'test-key' }}
        APPIFY_TOKEN: ${{ secrets.APPIFY_TOKEN || 'test-token' }}
        FLASK_ENV: testing
      run: |
        python -c "import app; print('Application imports successfully')"

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != ''
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/youtube-converter:latest
          ${{ secrets.DOCKER_USERNAME }}/youtube-converter:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-pages:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Prepare static files
      run: |
        mkdir -p _site
        cp static/* _site/
        # Update API endpoint in JavaScript to point to backend service
        sed -i 's|http://localhost:5000|${{ vars.BACKEND_URL || "https://your-backend-service.herokuapp.com" }}|g' _site/script.js
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  deploy-backend:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        dockerfile_path: "./Dockerfile"
        docker_build_args: |
          NODE_ENV
      if: secrets.HEROKU_API_KEY != ''
    
    - name: Deploy to Railway
      uses: bervProject/railway-deploy@v1.0.0
      with:
        railway_token: ${{ secrets.RAILWAY_TOKEN }}
        service: ${{ secrets.RAILWAY_SERVICE_NAME || 'youtube-converter' }}
      if: secrets.RAILWAY_TOKEN != ''

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-pages, deploy-backend]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-pages.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "Frontend: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "Backend: Check your hosting service dashboard"
        else
          echo "❌ Deployment failed. Check the logs above."
          exit 1
        fi